/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */

#ifndef _EI_CLASSIFIER_MODEL_VARIABLES_H_
#define _EI_CLASSIFIER_MODEL_VARIABLES_H_

/**
 * @file
 *  Auto-generated complete impulse definitions. The ei_impulse_handle_t should
 *  be passed to ei_run_classifier() function to use this specific impulse.
 *  This file should only be included in ei_run_classifier.h file.
 */

#include <stdint.h>
#include "model_metadata.h"

#include "tflite-model/tflite_learn_5_440960.h"
#include "tflite-model/tflite_learn_8.h"
#include "edge-impulse-sdk/classifier/ei_model_types.h"
#include "edge-impulse-sdk/classifier/inferencing_engines/engines.h"

inline const char* ei_classifier_inferencing_categories[] = { "cars", "no_cars" };

inline EI_CLASSIFIER_DSP_AXES_INDEX_TYPE ei_dsp_config_7_axes[] = {};
inline const uint32_t ei_dsp_config_7_axes_size = 1280;
inline ei_dsp_config_raw_t ei_dsp_config_7 = {
    7, // uint32_t blockId
    1, // int implementationVersion
    1280, // int length of axes
    1.0f // float scale-axes
};

inline const uint8_t ei_dsp_blocks_size = 1;
inline ei_model_dsp_t ei_dsp_blocks[ei_dsp_blocks_size] = {
    { // DSP block 7
        7,
        1280, // output size
        &extract_raw_features, // DSP function pointer
        (void*)&ei_dsp_config_7, // pointer to config struct
        ei_dsp_config_7_axes, // array of offsets into the input stream, one for each axis
        ei_dsp_config_7_axes_size, // number of axes
        1, // version
        nullptr, // factory function
    }
};
inline const ei_config_tflite_graph_t ei_config_tflite_graph_8 = {
    .implementation_version = 1,
    .model = tflite_learn_8,
    .model_size = tflite_learn_8_len,
    .arena_size = tflite_learn_8_arena_size
};

inline const ei_learning_block_config_tflite_graph_t ei_learning_block_config_8 = {
    .implementation_version = 1,
    .classification_mode = EI_CLASSIFIER_CLASSIFICATION_MODE_CLASSIFICATION,
    .block_id = 8,
    .object_detection = 0,
    .object_detection_last_layer = EI_CLASSIFIER_LAST_LAYER_UNKNOWN,
    .output_data_tensor = 0,
    .output_labels_tensor = 1,
    .output_score_tensor = 2,
    .threshold = 0,
    .quantized = 1,
    .compiled = 0,
    .graph_config = (void*)&ei_config_tflite_graph_8
};

inline const uint8_t ei_learning_blocks_size = 1;
inline const uint32_t ei_learning_block_8_inputs[1] = { 7 };
inline const uint8_t ei_learning_block_8_inputs_size = 1;
inline const ei_learning_block_t ei_learning_blocks[ei_learning_blocks_size] = {
    {
        8,
        false,
        &run_nn_inference,
        (void*)&ei_learning_block_config_8,
        EI_CLASSIFIER_IMAGE_SCALING_NONE,
        ei_learning_block_8_inputs,
        ei_learning_block_8_inputs_size,
        2
    },
};


inline const ei_object_detection_nms_config_t ei_object_detection_nms = {
    0.0f, /* NMS confidence threshold */
    0.2f  /* NMS IOU threshold */
};

inline const ei_impulse_t impulse_587727_0 = {
    .project_id = 587727,
    .project_owner = "Paula",
    .project_name = "takeover",
    .impulse_id = 1,
    .impulse_name = "Impulse #1",
    .deploy_version = 3,

    .nn_input_frame_size = 1280,
    .raw_sample_count = 1,
    .raw_samples_per_frame = 1280,
    .dsp_input_frame_size = 1 * 1280,
    .input_width = 0,
    .input_height = 0,
    .input_frames = 0,
    .interval_ms = 1,
    .frequency = 0,
    .dsp_blocks_size = ei_dsp_blocks_size,
    .dsp_blocks = ei_dsp_blocks,
    
    .object_detection_count = 0,
    .fomo_output_size = 0,

    
    .visual_ad_grid_size_x = 0,
    .visual_ad_grid_size_y = 0,
    
    .tflite_output_features_count = 2,
    .learning_blocks_size = ei_learning_blocks_size,
    .learning_blocks = ei_learning_blocks,

    .postprocessing_blocks_size = 0,
    .postprocessing_blocks = nullptr,

    .inferencing_engine = EI_CLASSIFIER_TFLITE,

    .sensor = EI_CLASSIFIER_SENSOR_FUSION,
    .fusion_string = "f1_v1 + f1_v2 + f1_v3 + f1_v4 + f1_v5 + f1_v6 + f1_v7 + f1_v8 + f1_v9 + f1_v10 + f1_v11 + f1_v12 + f1_v13 + f1_v14 + f1_v15 + f1_v16 + f1_v17 + f1_v18 + f1_v19 + f1_v20 + f1_v21 + f1_v22 + f1_v23 + f1_v24 + f1_v25 + f1_v26 + f1_v27 + f1_v28 + f1_v29 + f1_v30 + f1_v31 + f1_v32 + f1_v33 + f1_v34 + f1_v35 + f1_v36 + f1_v37 + f1_v38 + f1_v39 + f1_v40 + f1_v41 + f1_v42 + f1_v43 + f1_v44 + f1_v45 + f1_v46 + f1_v47 + f1_v48 + f1_v49 + f1_v50 + f1_v51 + f1_v52 + f1_v53 + f1_v54 + f1_v55 + f1_v56 + f1_v57 + f1_v58 + f1_v59 + f1_v60 + f1_v61 + f1_v62 + f1_v63 + f1_v64 + f2_v1 + f2_v2 + f2_v3 + f2_v4 + f2_v5 + f2_v6 + f2_v7 + f2_v8 + f2_v9 + f2_v10 + f2_v11 + f2_v12 + f2_v13 + f2_v14 + f2_v15 + f2_v16 + f2_v17 + f2_v18 + f2_v19 + f2_v20 + f2_v21 + f2_v22 + f2_v23 + f2_v24 + f2_v25 + f2_v26 + f2_v27 + f2_v28 + f2_v29 + f2_v30 + f2_v31 + f2_v32 + f2_v33 + f2_v34 + f2_v35 + f2_v36 + f2_v37 + f2_v38 + f2_v39 + f2_v40 + f2_v41 + f2_v42 + f2_v43 + f2_v44 + f2_v45 + f2_v46 + f2_v47 + f2_v48 + f2_v49 + f2_v50 + f2_v51 + f2_v52 + f2_v53 + f2_v54 + f2_v55 + f2_v56 + f2_v57 + f2_v58 + f2_v59 + f2_v60 + f2_v61 + f2_v62 + f2_v63 + f2_v64 + f3_v1 + f3_v2 + f3_v3 + f3_v4 + f3_v5 + f3_v6 + f3_v7 + f3_v8 + f3_v9 + f3_v10 + f3_v11 + f3_v12 + f3_v13 + f3_v14 + f3_v15 + f3_v16 + f3_v17 + f3_v18 + f3_v19 + f3_v20 + f3_v21 + f3_v22 + f3_v23 + f3_v24 + f3_v25 + f3_v26 + f3_v27 + f3_v28 + f3_v29 + f3_v30 + f3_v31 + f3_v32 + f3_v33 + f3_v34 + f3_v35 + f3_v36 + f3_v37 + f3_v38 + f3_v39 + f3_v40 + f3_v41 + f3_v42 + f3_v43 + f3_v44 + f3_v45 + f3_v46 + f3_v47 + f3_v48 + f3_v49 + f3_v50 + f3_v51 + f3_v52 + f3_v53 + f3_v54 + f3_v55 + f3_v56 + f3_v57 + f3_v58 + f3_v59 + f3_v60 + f3_v61 + f3_v62 + f3_v63 + f3_v64 + f4_v1 + f4_v2 + f4_v3 + f4_v4 + f4_v5 + f4_v6 + f4_v7 + f4_v8 + f4_v9 + f4_v10 + f4_v11 + f4_v12 + f4_v13 + f4_v14 + f4_v15 + f4_v16 + f4_v17 + f4_v18 + f4_v19 + f4_v20 + f4_v21 + f4_v22 + f4_v23 + f4_v24 + f4_v25 + f4_v26 + f4_v27 + f4_v28 + f4_v29 + f4_v30 + f4_v31 + f4_v32 + f4_v33 + f4_v34 + f4_v35 + f4_v36 + f4_v37 + f4_v38 + f4_v39 + f4_v40 + f4_v41 + f4_v42 + f4_v43 + f4_v44 + f4_v45 + f4_v46 + f4_v47 + f4_v48 + f4_v49 + f4_v50 + f4_v51 + f4_v52 + f4_v53 + f4_v54 + f4_v55 + f4_v56 + f4_v57 + f4_v58 + f4_v59 + f4_v60 + f4_v61 + f4_v62 + f4_v63 + f4_v64 + f5_v1 + f5_v2 + f5_v3 + f5_v4 + f5_v5 + f5_v6 + f5_v7 + f5_v8 + f5_v9 + f5_v10 + f5_v11 + f5_v12 + f5_v13 + f5_v14 + f5_v15 + f5_v16 + f5_v17 + f5_v18 + f5_v19 + f5_v20 + f5_v21 + f5_v22 + f5_v23 + f5_v24 + f5_v25 + f5_v26 + f5_v27 + f5_v28 + f5_v29 + f5_v30 + f5_v31 + f5_v32 + f5_v33 + f5_v34 + f5_v35 + f5_v36 + f5_v37 + f5_v38 + f5_v39 + f5_v40 + f5_v41 + f5_v42 + f5_v43 + f5_v44 + f5_v45 + f5_v46 + f5_v47 + f5_v48 + f5_v49 + f5_v50 + f5_v51 + f5_v52 + f5_v53 + f5_v54 + f5_v55 + f5_v56 + f5_v57 + f5_v58 + f5_v59 + f5_v60 + f5_v61 + f5_v62 + f5_v63 + f5_v64 + f6_v1 + f6_v2 + f6_v3 + f6_v4 + f6_v5 + f6_v6 + f6_v7 + f6_v8 + f6_v9 + f6_v10 + f6_v11 + f6_v12 + f6_v13 + f6_v14 + f6_v15 + f6_v16 + f6_v17 + f6_v18 + f6_v19 + f6_v20 + f6_v21 + f6_v22 + f6_v23 + f6_v24 + f6_v25 + f6_v26 + f6_v27 + f6_v28 + f6_v29 + f6_v30 + f6_v31 + f6_v32 + f6_v33 + f6_v34 + f6_v35 + f6_v36 + f6_v37 + f6_v38 + f6_v39 + f6_v40 + f6_v41 + f6_v42 + f6_v43 + f6_v44 + f6_v45 + f6_v46 + f6_v47 + f6_v48 + f6_v49 + f6_v50 + f6_v51 + f6_v52 + f6_v53 + f6_v54 + f6_v55 + f6_v56 + f6_v57 + f6_v58 + f6_v59 + f6_v60 + f6_v61 + f6_v62 + f6_v63 + f6_v64 + f7_v1 + f7_v2 + f7_v3 + f7_v4 + f7_v5 + f7_v6 + f7_v7 + f7_v8 + f7_v9 + f7_v10 + f7_v11 + f7_v12 + f7_v13 + f7_v14 + f7_v15 + f7_v16 + f7_v17 + f7_v18 + f7_v19 + f7_v20 + f7_v21 + f7_v22 + f7_v23 + f7_v24 + f7_v25 + f7_v26 + f7_v27 + f7_v28 + f7_v29 + f7_v30 + f7_v31 + f7_v32 + f7_v33 + f7_v34 + f7_v35 + f7_v36 + f7_v37 + f7_v38 + f7_v39 + f7_v40 + f7_v41 + f7_v42 + f7_v43 + f7_v44 + f7_v45 + f7_v46 + f7_v47 + f7_v48 + f7_v49 + f7_v50 + f7_v51 + f7_v52 + f7_v53 + f7_v54 + f7_v55 + f7_v56 + f7_v57 + f7_v58 + f7_v59 + f7_v60 + f7_v61 + f7_v62 + f7_v63 + f7_v64 + f8_v1 + f8_v2 + f8_v3 + f8_v4 + f8_v5 + f8_v6 + f8_v7 + f8_v8 + f8_v9 + f8_v10 + f8_v11 + f8_v12 + f8_v13 + f8_v14 + f8_v15 + f8_v16 + f8_v17 + f8_v18 + f8_v19 + f8_v20 + f8_v21 + f8_v22 + f8_v23 + f8_v24 + f8_v25 + f8_v26 + f8_v27 + f8_v28 + f8_v29 + f8_v30 + f8_v31 + f8_v32 + f8_v33 + f8_v34 + f8_v35 + f8_v36 + f8_v37 + f8_v38 + f8_v39 + f8_v40 + f8_v41 + f8_v42 + f8_v43 + f8_v44 + f8_v45 + f8_v46 + f8_v47 + f8_v48 + f8_v49 + f8_v50 + f8_v51 + f8_v52 + f8_v53 + f8_v54 + f8_v55 + f8_v56 + f8_v57 + f8_v58 + f8_v59 + f8_v60 + f8_v61 + f8_v62 + f8_v63 + f8_v64 + f9_v1 + f9_v2 + f9_v3 + f9_v4 + f9_v5 + f9_v6 + f9_v7 + f9_v8 + f9_v9 + f9_v10 + f9_v11 + f9_v12 + f9_v13 + f9_v14 + f9_v15 + f9_v16 + f9_v17 + f9_v18 + f9_v19 + f9_v20 + f9_v21 + f9_v22 + f9_v23 + f9_v24 + f9_v25 + f9_v26 + f9_v27 + f9_v28 + f9_v29 + f9_v30 + f9_v31 + f9_v32 + f9_v33 + f9_v34 + f9_v35 + f9_v36 + f9_v37 + f9_v38 + f9_v39 + f9_v40 + f9_v41 + f9_v42 + f9_v43 + f9_v44 + f9_v45 + f9_v46 + f9_v47 + f9_v48 + f9_v49 + f9_v50 + f9_v51 + f9_v52 + f9_v53 + f9_v54 + f9_v55 + f9_v56 + f9_v57 + f9_v58 + f9_v59 + f9_v60 + f9_v61 + f9_v62 + f9_v63 + f9_v64 + f10_v1 + f10_v2 + f10_v3 + f10_v4 + f10_v5 + f10_v6 + f10_v7 + f10_v8 + f10_v9 + f10_v10 + f10_v11 + f10_v12 + f10_v13 + f10_v14 + f10_v15 + f10_v16 + f10_v17 + f10_v18 + f10_v19 + f10_v20 + f10_v21 + f10_v22 + f10_v23 + f10_v24 + f10_v25 + f10_v26 + f10_v27 + f10_v28 + f10_v29 + f10_v30 + f10_v31 + f10_v32 + f10_v33 + f10_v34 + f10_v35 + f10_v36 + f10_v37 + f10_v38 + f10_v39 + f10_v40 + f10_v41 + f10_v42 + f10_v43 + f10_v44 + f10_v45 + f10_v46 + f10_v47 + f10_v48 + f10_v49 + f10_v50 + f10_v51 + f10_v52 + f10_v53 + f10_v54 + f10_v55 + f10_v56 + f10_v57 + f10_v58 + f10_v59 + f10_v60 + f10_v61 + f10_v62 + f10_v63 + f10_v64 + f11_v1 + f11_v2 + f11_v3 + f11_v4 + f11_v5 + f11_v6 + f11_v7 + f11_v8 + f11_v9 + f11_v10 + f11_v11 + f11_v12 + f11_v13 + f11_v14 + f11_v15 + f11_v16 + f11_v17 + f11_v18 + f11_v19 + f11_v20 + f11_v21 + f11_v22 + f11_v23 + f11_v24 + f11_v25 + f11_v26 + f11_v27 + f11_v28 + f11_v29 + f11_v30 + f11_v31 + f11_v32 + f11_v33 + f11_v34 + f11_v35 + f11_v36 + f11_v37 + f11_v38 + f11_v39 + f11_v40 + f11_v41 + f11_v42 + f11_v43 + f11_v44 + f11_v45 + f11_v46 + f11_v47 + f11_v48 + f11_v49 + f11_v50 + f11_v51 + f11_v52 + f11_v53 + f11_v54 + f11_v55 + f11_v56 + f11_v57 + f11_v58 + f11_v59 + f11_v60 + f11_v61 + f11_v62 + f11_v63 + f11_v64 + f12_v1 + f12_v2 + f12_v3 + f12_v4 + f12_v5 + f12_v6 + f12_v7 + f12_v8 + f12_v9 + f12_v10 + f12_v11 + f12_v12 + f12_v13 + f12_v14 + f12_v15 + f12_v16 + f12_v17 + f12_v18 + f12_v19 + f12_v20 + f12_v21 + f12_v22 + f12_v23 + f12_v24 + f12_v25 + f12_v26 + f12_v27 + f12_v28 + f12_v29 + f12_v30 + f12_v31 + f12_v32 + f12_v33 + f12_v34 + f12_v35 + f12_v36 + f12_v37 + f12_v38 + f12_v39 + f12_v40 + f12_v41 + f12_v42 + f12_v43 + f12_v44 + f12_v45 + f12_v46 + f12_v47 + f12_v48 + f12_v49 + f12_v50 + f12_v51 + f12_v52 + f12_v53 + f12_v54 + f12_v55 + f12_v56 + f12_v57 + f12_v58 + f12_v59 + f12_v60 + f12_v61 + f12_v62 + f12_v63 + f12_v64 + f13_v1 + f13_v2 + f13_v3 + f13_v4 + f13_v5 + f13_v6 + f13_v7 + f13_v8 + f13_v9 + f13_v10 + f13_v11 + f13_v12 + f13_v13 + f13_v14 + f13_v15 + f13_v16 + f13_v17 + f13_v18 + f13_v19 + f13_v20 + f13_v21 + f13_v22 + f13_v23 + f13_v24 + f13_v25 + f13_v26 + f13_v27 + f13_v28 + f13_v29 + f13_v30 + f13_v31 + f13_v32 + f13_v33 + f13_v34 + f13_v35 + f13_v36 + f13_v37 + f13_v38 + f13_v39 + f13_v40 + f13_v41 + f13_v42 + f13_v43 + f13_v44 + f13_v45 + f13_v46 + f13_v47 + f13_v48 + f13_v49 + f13_v50 + f13_v51 + f13_v52 + f13_v53 + f13_v54 + f13_v55 + f13_v56 + f13_v57 + f13_v58 + f13_v59 + f13_v60 + f13_v61 + f13_v62 + f13_v63 + f13_v64 + f14_v1 + f14_v2 + f14_v3 + f14_v4 + f14_v5 + f14_v6 + f14_v7 + f14_v8 + f14_v9 + f14_v10 + f14_v11 + f14_v12 + f14_v13 + f14_v14 + f14_v15 + f14_v16 + f14_v17 + f14_v18 + f14_v19 + f14_v20 + f14_v21 + f14_v22 + f14_v23 + f14_v24 + f14_v25 + f14_v26 + f14_v27 + f14_v28 + f14_v29 + f14_v30 + f14_v31 + f14_v32 + f14_v33 + f14_v34 + f14_v35 + f14_v36 + f14_v37 + f14_v38 + f14_v39 + f14_v40 + f14_v41 + f14_v42 + f14_v43 + f14_v44 + f14_v45 + f14_v46 + f14_v47 + f14_v48 + f14_v49 + f14_v50 + f14_v51 + f14_v52 + f14_v53 + f14_v54 + f14_v55 + f14_v56 + f14_v57 + f14_v58 + f14_v59 + f14_v60 + f14_v61 + f14_v62 + f14_v63 + f14_v64 + f15_v1 + f15_v2 + f15_v3 + f15_v4 + f15_v5 + f15_v6 + f15_v7 + f15_v8 + f15_v9 + f15_v10 + f15_v11 + f15_v12 + f15_v13 + f15_v14 + f15_v15 + f15_v16 + f15_v17 + f15_v18 + f15_v19 + f15_v20 + f15_v21 + f15_v22 + f15_v23 + f15_v24 + f15_v25 + f15_v26 + f15_v27 + f15_v28 + f15_v29 + f15_v30 + f15_v31 + f15_v32 + f15_v33 + f15_v34 + f15_v35 + f15_v36 + f15_v37 + f15_v38 + f15_v39 + f15_v40 + f15_v41 + f15_v42 + f15_v43 + f15_v44 + f15_v45 + f15_v46 + f15_v47 + f15_v48 + f15_v49 + f15_v50 + f15_v51 + f15_v52 + f15_v53 + f15_v54 + f15_v55 + f15_v56 + f15_v57 + f15_v58 + f15_v59 + f15_v60 + f15_v61 + f15_v62 + f15_v63 + f15_v64 + f16_v1 + f16_v2 + f16_v3 + f16_v4 + f16_v5 + f16_v6 + f16_v7 + f16_v8 + f16_v9 + f16_v10 + f16_v11 + f16_v12 + f16_v13 + f16_v14 + f16_v15 + f16_v16 + f16_v17 + f16_v18 + f16_v19 + f16_v20 + f16_v21 + f16_v22 + f16_v23 + f16_v24 + f16_v25 + f16_v26 + f16_v27 + f16_v28 + f16_v29 + f16_v30 + f16_v31 + f16_v32 + f16_v33 + f16_v34 + f16_v35 + f16_v36 + f16_v37 + f16_v38 + f16_v39 + f16_v40 + f16_v41 + f16_v42 + f16_v43 + f16_v44 + f16_v45 + f16_v46 + f16_v47 + f16_v48 + f16_v49 + f16_v50 + f16_v51 + f16_v52 + f16_v53 + f16_v54 + f16_v55 + f16_v56 + f16_v57 + f16_v58 + f16_v59 + f16_v60 + f16_v61 + f16_v62 + f16_v63 + f16_v64 + f17_v1 + f17_v2 + f17_v3 + f17_v4 + f17_v5 + f17_v6 + f17_v7 + f17_v8 + f17_v9 + f17_v10 + f17_v11 + f17_v12 + f17_v13 + f17_v14 + f17_v15 + f17_v16 + f17_v17 + f17_v18 + f17_v19 + f17_v20 + f17_v21 + f17_v22 + f17_v23 + f17_v24 + f17_v25 + f17_v26 + f17_v27 + f17_v28 + f17_v29 + f17_v30 + f17_v31 + f17_v32 + f17_v33 + f17_v34 + f17_v35 + f17_v36 + f17_v37 + f17_v38 + f17_v39 + f17_v40 + f17_v41 + f17_v42 + f17_v43 + f17_v44 + f17_v45 + f17_v46 + f17_v47 + f17_v48 + f17_v49 + f17_v50 + f17_v51 + f17_v52 + f17_v53 + f17_v54 + f17_v55 + f17_v56 + f17_v57 + f17_v58 + f17_v59 + f17_v60 + f17_v61 + f17_v62 + f17_v63 + f17_v64 + f18_v1 + f18_v2 + f18_v3 + f18_v4 + f18_v5 + f18_v6 + f18_v7 + f18_v8 + f18_v9 + f18_v10 + f18_v11 + f18_v12 + f18_v13 + f18_v14 + f18_v15 + f18_v16 + f18_v17 + f18_v18 + f18_v19 + f18_v20 + f18_v21 + f18_v22 + f18_v23 + f18_v24 + f18_v25 + f18_v26 + f18_v27 + f18_v28 + f18_v29 + f18_v30 + f18_v31 + f18_v32 + f18_v33 + f18_v34 + f18_v35 + f18_v36 + f18_v37 + f18_v38 + f18_v39 + f18_v40 + f18_v41 + f18_v42 + f18_v43 + f18_v44 + f18_v45 + f18_v46 + f18_v47 + f18_v48 + f18_v49 + f18_v50 + f18_v51 + f18_v52 + f18_v53 + f18_v54 + f18_v55 + f18_v56 + f18_v57 + f18_v58 + f18_v59 + f18_v60 + f18_v61 + f18_v62 + f18_v63 + f18_v64 + f19_v1 + f19_v2 + f19_v3 + f19_v4 + f19_v5 + f19_v6 + f19_v7 + f19_v8 + f19_v9 + f19_v10 + f19_v11 + f19_v12 + f19_v13 + f19_v14 + f19_v15 + f19_v16 + f19_v17 + f19_v18 + f19_v19 + f19_v20 + f19_v21 + f19_v22 + f19_v23 + f19_v24 + f19_v25 + f19_v26 + f19_v27 + f19_v28 + f19_v29 + f19_v30 + f19_v31 + f19_v32 + f19_v33 + f19_v34 + f19_v35 + f19_v36 + f19_v37 + f19_v38 + f19_v39 + f19_v40 + f19_v41 + f19_v42 + f19_v43 + f19_v44 + f19_v45 + f19_v46 + f19_v47 + f19_v48 + f19_v49 + f19_v50 + f19_v51 + f19_v52 + f19_v53 + f19_v54 + f19_v55 + f19_v56 + f19_v57 + f19_v58 + f19_v59 + f19_v60 + f19_v61 + f19_v62 + f19_v63 + f19_v64 + f20_v1 + f20_v2 + f20_v3 + f20_v4 + f20_v5 + f20_v6 + f20_v7 + f20_v8 + f20_v9 + f20_v10 + f20_v11 + f20_v12 + f20_v13 + f20_v14 + f20_v15 + f20_v16 + f20_v17 + f20_v18 + f20_v19 + f20_v20 + f20_v21 + f20_v22 + f20_v23 + f20_v24 + f20_v25 + f20_v26 + f20_v27 + f20_v28 + f20_v29 + f20_v30 + f20_v31 + f20_v32 + f20_v33 + f20_v34 + f20_v35 + f20_v36 + f20_v37 + f20_v38 + f20_v39 + f20_v40 + f20_v41 + f20_v42 + f20_v43 + f20_v44 + f20_v45 + f20_v46 + f20_v47 + f20_v48 + f20_v49 + f20_v50 + f20_v51 + f20_v52 + f20_v53 + f20_v54 + f20_v55 + f20_v56 + f20_v57 + f20_v58 + f20_v59 + f20_v60 + f20_v61 + f20_v62 + f20_v63 + f20_v64",
    .slice_size = (1/4),
    .slices_per_model_window = 4,

    .has_anomaly = EI_ANOMALY_TYPE_UNKNOWN,
    .label_count = 2,
    .categories = ei_classifier_inferencing_categories,
    .object_detection_nms = ei_object_detection_nms
};


inline const char* ei_classifier_inferencing_categories_440960[] = { "asphalt", "compacted", "paving", "sett", "standing" };

inline EI_CLASSIFIER_DSP_AXES_INDEX_TYPE ei_dsp_config_4_440960_axes[] = { 0, 1, 2, 3, 4, 5 };
inline const uint32_t ei_dsp_config_4_440960_axes_size = 6;
inline ei_dsp_config_spectral_analysis_t ei_dsp_config_4_440960 = {
    4, // uint32_t blockId
    4, // int implementationVersion
    6, // int length of axes
    1.0f, // float scale-axes
    1, // int input-decimation-ratio
    "low", // select filter-type
    3.0f, // float filter-cutoff
    6, // int filter-order
    "FFT", // select analysis-type
    16, // int fft-length
    3, // int spectral-peaks-count
    0.1f, // float spectral-peaks-threshold
    "0.1, 0.5, 1.0, 2.0, 5.0", // string spectral-power-edges
    true, // boolean do-log
    true, // boolean do-fft-overlap
    1, // int wavelet-level
    "db4", // select wavelet
    false // boolean extra-low-freq
};


inline EI_CLASSIFIER_DSP_AXES_INDEX_TYPE ei_dsp_config_12_440960_axes[] = { 0, 1, 2, 3, 4, 5 };
inline const uint32_t ei_dsp_config_12_440960_axes_size = 6;
inline ei_dsp_config_raw_t ei_dsp_config_12_440960 = {
    12, // uint32_t blockId
    1, // int implementationVersion
    6, // int length of axes
    1.0f // float scale-axes
};

inline const uint8_t ei_dsp_blocks_440960_size = 2;
inline ei_model_dsp_t ei_dsp_blocks_440960[ei_dsp_blocks_440960_size] = {
    { // DSP block 4
        4,
        60, // output size
        &extract_spectral_analysis_features, // DSP function pointer
        (void*)&ei_dsp_config_4_440960, // pointer to config struct
        ei_dsp_config_4_440960_axes, // array of offsets into the input stream, one for each axis
        ei_dsp_config_4_440960_axes_size, // number of axes
        1, // version
        nullptr, // factory function
    },
    { // DSP block 12
        12,
        186, // output size
        &extract_raw_features, // DSP function pointer
        (void*)&ei_dsp_config_12_440960, // pointer to config struct
        ei_dsp_config_12_440960_axes, // array of offsets into the input stream, one for each axis
        ei_dsp_config_12_440960_axes_size, // number of axes
        1, // version
        nullptr, // factory function
    }
};
inline const ei_config_tflite_graph_t ei_config_tflite_graph_5_440960 = {
    .implementation_version = 1,
    .model = tflite_learn_5_440960,
    .model_size = tflite_learn_5_440960_len,
    .arena_size = tflite_learn_5_440960_arena_size
};

inline const ei_learning_block_config_tflite_graph_t ei_learning_block_config_5_440960 = {
    .implementation_version = 1,
    .classification_mode = EI_CLASSIFIER_CLASSIFICATION_MODE_CLASSIFICATION,
    .block_id = 5,
    .object_detection = 0,
    .object_detection_last_layer = EI_CLASSIFIER_LAST_LAYER_UNKNOWN,
    .output_data_tensor = 0,
    .output_labels_tensor = 1,
    .output_score_tensor = 2,
    .threshold = 0,
    .quantized = 1,
    .compiled = 0,
    .graph_config = (void*)&ei_config_tflite_graph_5_440960
};

inline const uint8_t ei_learning_blocks_440960_size = 1;
inline const uint32_t ei_learning_block_5_inputs_440960[1] = { 4 };
inline const uint8_t ei_learning_block_5_inputs_440960_size = 1;
inline const ei_learning_block_t ei_learning_blocks_440960[ei_learning_blocks_440960_size] = {
    {
        5,
        false,
        &run_nn_inference,
        (void*)&ei_learning_block_config_5_440960,
        EI_CLASSIFIER_IMAGE_SCALING_NONE,
        ei_learning_block_5_inputs_440960,
        ei_learning_block_5_inputs_440960_size,
        5
    },
};


inline const ei_object_detection_nms_config_t ei_object_detection_nms_440960 = {
    0.0f, /* NMS confidence threshold */
    0.2f  /* NMS IOU threshold */
};

inline const ei_impulse_t impulse_440960_0 = {
    .project_id = 440960,
    .project_owner = "Paula",
    .project_name = "bike-3s-10Hz-5class",
    .impulse_id = 1,
    .impulse_name = "Impulse #1",
    .deploy_version = 13,

    .nn_input_frame_size = 60,
    .raw_sample_count = 31,
    .raw_samples_per_frame = 6,
    .dsp_input_frame_size = 31 * 6,
    .input_width = 0,
    .input_height = 0,
    .input_frames = 0,
    .interval_ms = 96,
    .frequency = 10.416666666666666,
    .dsp_blocks_size = ei_dsp_blocks_440960_size,
    .dsp_blocks = ei_dsp_blocks_440960,
    
    .object_detection_count = 0,
    .fomo_output_size = 0,

    
    .visual_ad_grid_size_x = 0,
    .visual_ad_grid_size_y = 0,
    
    .tflite_output_features_count = 5,
    .learning_blocks_size = ei_learning_blocks_440960_size,
    .learning_blocks = ei_learning_blocks_440960,

    .postprocessing_blocks_size = 0,
    .postprocessing_blocks = nullptr,

    .inferencing_engine = EI_CLASSIFIER_TFLITE,

    .sensor = EI_CLASSIFIER_SENSOR_FUSION,
    .fusion_string = "AccX + AccY + AccZ + GyrX + GyrY + GyrZ",
    .slice_size = (31/4),
    .slices_per_model_window = 4,

    .has_anomaly = EI_ANOMALY_TYPE_UNKNOWN,
    .label_count = 5,
    .categories = ei_classifier_inferencing_categories_440960,
    .object_detection_nms = ei_object_detection_nms_440960
};

inline ei_impulse_handle_t impulse_handle_440960_0 = ei_impulse_handle_t( &impulse_440960_0 );

inline ei_impulse_handle_t impulse_handle_587727_0 = ei_impulse_handle_t( &impulse_587727_0 );
inline ei_impulse_handle_t& ei_default_impulse = impulse_handle_587727_0;

#endif // _EI_CLASSIFIER_MODEL_VARIABLES_H_
